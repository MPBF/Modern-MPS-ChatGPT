You are working inside the Modern-MPS app (React + shadcn/ui + React Query, Node/Express, PostgreSQL with Drizzle).
Goal: Implement a roll-based flow Film → Printing → Cutting → Warehouse with:
(A) Locking new rolls when planned quantity is reached (with configurable tolerance %), and
(B) Per-roll tracking number + QR code image.

Keep Arabic labels + RTL. Do NOT break existing APIs; extend minimally.

## 0) Config & assumptions
- Existing tables: production_orders, rolls, machines.
- An order is visible in production when moved to "in_production".
- Add a small settings table to control tolerance and QR prefix.

## 1) Minimal schema additions (Drizzle + safe migrations)
- NEW table `production_settings` (single-row or keyed):
  - id serial pk
  - overrun_tolerance_percent numeric NOT NULL DEFAULT 3      -- e.g., 3% allowed over planned weight
  - allow_last_roll_overrun boolean NOT NULL DEFAULT true      -- only the last roll may exceed
  - qr_prefix varchar(32) NOT NULL DEFAULT 'ROLL'
- production_orders (if missing):
  - requires_printing boolean NOT NULL DEFAULT false
  - in_production_at timestamp NULL
- rolls (extend if missing):
  - roll_seq int NOT NULL                                     -- sequential per job order (1,2,3…)
  - roll_number varchar(64) NOT NULL                          -- e.g., {qr_prefix}-{jobOrderId}-{roll_seq}
  - qr_code_text text NOT NULL                                -- raw QR content
  - qr_png_base64 text NULL                                   -- PNG as base64 for printing/downloading
  - stage enum('film','printing','cutting','done') NOT NULL   -- current section
  - weight_kg numeric NOT NULL                                -- assigned by Film
  - cut_weight_total_kg numeric NOT NULL DEFAULT 0
  - waste_kg numeric NOT NULL DEFAULT 0
  - printed_at timestamp NULL
  - cut_completed_at timestamp NULL

- NEW table `cuts`:
  - id serial pk
  - roll_id int fk -> rolls(id) on delete cascade
  - cut_weight_kg numeric NOT NULL
  - pieces_count int NULL
  - created_at timestamp default now

- NEW table `warehouse_receipts`:
  - id serial pk
  - job_order_id int fk -> production_orders(id)
  - cut_id int fk -> cuts(id) NULL
  - received_weight_kg numeric NOT NULL
  - received_by int NULL
  - created_at timestamp default now

Update TypeScript schema/types and drizzle relations.

## 2) Backend – routes & logic (Express + zod)
### 2.1 Start production visibility
PATCH `/api/job-orders/:id/start-production`
- Sets status to 'in_production' (or current equivalent) and in_production_at=now().
- Return header with planned quantity and requires_printing.

### 2.2 Roll creation with LOCK + tolerance (FILM)
POST `/api/rolls`
Body: { job_order_id, machine_id, weight_kg, final_roll?: boolean }
Logic:
- Get job order planned_quantity_kg (existing field) and settings.overrun_tolerance_percent.
- Compute:
  - current_rolled = SUM(rolls.weight_kg WHERE job_order_id AND stage IN ('film','printing','cutting','done'))
  - limit = planned_quantity_kg * (1 + tolerance/100)
  - new_total = current_rolled + weight_kg
- Validation:
  - If new_total > limit → 
      - If `final_roll = true` AND settings.allow_last_roll_overrun = true AND current_rolled < limit AND weight_kg <= (limit - current_rolled) + 0.0001:
          - Allow (this is the last roll).
      - Else → reject with Arabic error:
        "تجاوزت الحد المسموح به مع نسبة السماح. لا يمكن إنشاء رول جديد."
- Compute next sequential `roll_seq` per job order (MAX+1).
- Build `roll_number = ${settings.qr_prefix}-${job_order_id}-${roll_seq}`.
- Build `qr_code_text` as a stable payload (e.g. JSON or URL-safe text):
  Example JSON: {"type":"roll","job_order_id":123,"roll_seq":5,"roll_number":"ROLL-123-5"}
- Generate `qr_png_base64` server-side (use a QR library).
- Set `stage` auto-route:
  - If production_orders.requires_printing = true → 'printing'
  - Else → 'cutting'
- Insert roll and return it (with qr fields).

### 2.3 Printing
PATCH `/api/rolls/:id/print`
Body: { machine_id?: number, notes?: string }
Logic:
- Set printed_at=now(), stage='cutting'. Return updated roll.

### 2.4 Cutting (+ waste auto-calc)
POST `/api/cuts`
Body: { roll_id, cut_weight_kg, pieces_count? }
Validation:
- 0 < cut_weight_kg ≤ (roll.weight_kg - roll.cut_weight_total_kg)
Logic:
- Insert cut, increment roll.cut_weight_total_kg.
- If roll.cut_weight_total_kg == roll.weight_kg:
    - stage='done'
    - waste_kg = roll.weight_kg - SUM(cuts.cut_weight_kg)  -- typically 0, keeps formula for trims/grind.
    - cut_completed_at=now()
- Return cut + updated roll.

### 2.5 Warehouse receipts (partial)
POST `/api/warehouse/receipts`
Body: { job_order_id, cut_id?, received_weight_kg, received_by? }
Logic:
- Insert receipt, recompute total received for job order.
- If total_received ≥ planned_quantity_kg → set job order status 'completed'.
- Return receipt + progress.

### 2.6 Queues & progress APIs (for UI)
GET `/api/production/film-queue`
- Orders with status in_production + summary (planned, rolled so far, remaining; recent rolls).

GET `/api/production/printing-queue`
- Rolls where stage='printing'.

GET `/api/production/cutting-queue`
- Rolls where stage='cutting' + remaining_to_cut (= weight_kg - cut_weight_total_kg).

GET `/api/production/order-progress/:jobOrderId`
- Returns planned_weight, total_rolled, total_cut, total_received, total_waste, and per-stage breakdown.

GET `/api/rolls/:id/qr`
- Returns { roll_number, qr_code_text, qr_png_base64 } for print/download.

Arabic error messages for all validations.

## 3) Frontend – React (RTL + Arabic)
Add/adjust Production page with 4 tabs:
1) "فيلم"  2) "طباعة"  3) "تقطيع"  4) "استلام المستودع"

### 3.1 Film tab
- Orders table (in production): رقم أمر التشغيل، المنتج، الكمية المطلوبة (كجم)، المنتَج (كجم)، المتبقي، حالة القفل.
- Action "إنشاء رول":
  Fields: "الماكينة"، "وزن الرول (كجم)"، Checkbox "رول أخير (سماح)"
  - If locked: disable submit and show badge "مغلق بعد بلوغ الحد + السماح".
- On success: show the new roll with:
  - شارة "رقم الرول: {roll_number}"
  - زر "طباعة QR" → uses `/api/rolls/:id/qr` (download PNG).

### 3.2 Printing tab
- Table of stage='printing': رقم الرول، الوزن، الماكينة، QR (زر صغير)، تاريخ الإنشاء.
- Row action: "تمت الطباعة" → PATCH `/api/rolls/:id/print` (اختياري اختيار ماكينة الطباعة).

### 3.3 Cutting tab
- Table: رقم الرول، الوزن الكلي، المقطوع حتى الآن، المتبقي للقص، حالة.
- Row action: "تسجيل كمية مقطوعة"
  Modal: "الوزن المقطوع (كجم)"، "عدد القطع (اختياري)"
- عند اكتمال قص الرول: إظهار شارة "اكتمل القص" مع عرض الهدر المحسوب.
- زر "عرض QR" للتتبّع السريع.

### 3.4 Warehouse tab
- جدول بمجمّع الكميات المقطوعة غير المستلمة.
- Action: "استلام" (جزئي أو كامل) → POST `/api/warehouse/receipts`
- بطاقات تقدم: "المطلوب"، "المنتج (رولات)"، "المقطوع"، "المستلم"، "المتبقي"، "الهدر".

### 3.5 Arabic labels (use exactly)
- القفل/السماح: "مغلق" ، "سماح الرول الأخير" ، "تجاوز الحد المسموح بالسماح"
- QR: "رقم الرول" ، "طباعة QR" ، "عرض QR"
- Film: "فيلم" ، "إنشاء رول" ، "الماكينة" ، "وزن الرول (كجم)"
- Printing: "طباعة" ، "تمت الطباعة"
- Cutting: "تقطيع" ، "تسجيل كمية مقطوعة" ، "الوزن المقطوع (كجم)" ، "عدد القطع"
- Warehouse: "استلام المستودع" ، "استلام" ، "المطلوب" ، "المقطوع" ، "المستلم" ، "المتبقي" ، "الهدر"

## 4) Query keys (React Query)
- ['/api/production/film-queue']
- ['/api/production/printing-queue']
- ['/api/production/cutting-queue']
- ['/api/production/order-progress', jobOrderId]
- ['/api/rolls', jobOrderId]
- ['/api/rolls', rollId, 'qr']
- ['/api/warehouse/pending-receipts', jobOrderId?]

## 5) Deliverables
- Drizzle migrations + updated schema/types.
- New/extended Express routes with zod and Arabic messages.
- UI tabs/tables/modals (RTL) with QR print/download and lock indicators.
- CHANGELOG of files modified and how to run.

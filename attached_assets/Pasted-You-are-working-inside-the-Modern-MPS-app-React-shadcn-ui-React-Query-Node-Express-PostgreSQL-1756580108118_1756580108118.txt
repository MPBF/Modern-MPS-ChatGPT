You are working inside the Modern-MPS app (React + shadcn/ui + React Query, Node/Express, PostgreSQL with Drizzle).
Goal: Implement a complete roll-based production flow across Film → Printing → Cutting → Warehouse, with QR tracking, locking rules, settings, and robust validations to avoid production pitfalls.
Keep Arabic labels (RTL). Extend schema/routes minimally without breaking existing APIs.

====================================================
## 0) Assumptions
- Existing: job_orders, rolls, machines.
- Rolls already linked to job_orders.
- Orders become visible when moved to "in_production".
====================================================

## 1) Schema changes (Drizzle migrations)
### job_orders
- requires_printing boolean NOT NULL DEFAULT false
- in_production_at timestamp NULL

### rolls (extend existing)
- roll_seq int NOT NULL
- roll_number varchar(64) UNIQUE NOT NULL
- qr_code_text text NOT NULL
- qr_png_base64 text NULL
- stage enum('film','printing','cutting','done') NOT NULL
- weight_kg decimal(12,3) NOT NULL
- cut_weight_total_kg decimal(12,3) NOT NULL DEFAULT 0
- waste_kg decimal(12,3) NOT NULL DEFAULT 0
- printed_at timestamp NULL
- cut_completed_at timestamp NULL
- performed_by int NULL (FK employees)

### cuts (new table)
- id serial pk
- roll_id int fk -> rolls(id) on delete cascade
- cut_weight_kg decimal(12,3) NOT NULL
- pieces_count int NULL
- created_at timestamp default now
- performed_by int NULL

### warehouse_receipts (new table)
- id serial pk
- job_order_id int fk -> job_orders(id)
- cut_id int fk -> cuts(id) NULL
- received_weight_kg decimal(12,3) NOT NULL
- received_by int NULL
- created_at timestamp default now

### production_settings (new table, single row)
- id serial pk
- overrun_tolerance_percent decimal(5,2) NOT NULL DEFAULT 3
- allow_last_roll_overrun boolean NOT NULL DEFAULT true
- qr_prefix varchar(32) NOT NULL DEFAULT 'ROLL'

### Indexes & constraints
- UNIQUE(job_order_id, roll_seq)
- INDEX rolls_stage_idx (stage)
- INDEX cuts_roll_idx (roll_id, created_at DESC)

====================================================
## 2) Backend (Express + zod)
### 2.1 Production settings
- GET `/api/production/settings`
- PATCH `/api/production/settings`
  Body: { overrun_tolerance_percent (0–10), allow_last_roll_overrun, qr_prefix }

### 2.2 Start production
PATCH `/api/job-orders/:id/start-production`
- Sets status='in_production', in_production_at=now().

### 2.3 Film: create roll with lock + tolerance
POST `/api/rolls`
Body: { job_order_id, machine_id, weight_kg, final_roll?: boolean }
Logic (transaction with SELECT ... FOR UPDATE):
- Compute rolled so far, new_total, tolerance limit = planned*(1+tolerance%).
- If new_total > limit:
  - Allow only if final_roll=true AND allow_last_roll_overrun=true AND within tolerance.
  - Else reject with Arabic error: "تجاوزت الحد المسموح به مع نسبة السماح. لا يمكن إنشاء رول جديد."
- Generate roll_seq = MAX+1.
- Build roll_number = {qr_prefix}-{job_order_id}-{roll_seq}.
- qr_code_text = JSON {type:'roll',job_order_id,roll_seq,roll_number}.
- Generate qr_png_base64 via QR lib.
- stage = requires_printing? 'printing' : 'cutting'.
- Insert roll, return with qr.

### 2.4 Printing
PATCH `/api/rolls/:id/print`
- Set printed_at=now(), stage='cutting'.

### 2.5 Cutting
POST `/api/cuts`
Body: { roll_id, cut_weight_kg, pieces_count? }
Logic:
- Lock roll row.
- cut_weight_kg ≤ (roll.weight_kg - roll.cut_weight_total_kg).
- Insert cut, increment roll.cut_weight_total_kg.
- If fully cut → stage='done', waste=roll.weight_kg - sum(cuts), cut_completed_at=now().

### 2.6 Warehouse receipts
POST `/api/warehouse/receipts`
Body: { job_order_id, cut_id?, received_weight_kg, received_by? }
- Validate ≤ remaining cuts.
- Insert receipt, recalc totals.
- If total_received ≥ planned → mark job_order completed.

### 2.7 Queues
- GET `/api/production/film-queue` → orders in production with summary.
- GET `/api/production/printing-queue` → rolls stage=printing.
- GET `/api/production/cutting-queue` → rolls stage=cutting.
- GET `/api/production/order-progress/:jobOrderId` → {planned, rolled, cut, received, waste, per-stage}.

### 2.8 QR retrieval
GET `/api/rolls/:id/qr` → { roll_number, qr_text, qr_png_base64 }.

====================================================
## 3) Frontend (React + shadcn/ui + RTL)
Tabs: "فيلم" | "طباعة" | "تقطيع" | "استلام المستودع" | "إعدادات الإنتاج"

### Film tab
- Orders table: رقم أمر التشغيل، المنتج، الكمية المطلوبة، المنتَج، المتبقي، حالة القفل.
- Button "إنشاء رول" → modal { الماكينة، وزن الرول (كجم)، [ ] رول أخير (سماح) }.
- Show QR badge + زر "طباعة QR".
- إذا مغلق: disable with badge "مغلق بعد بلوغ الحد + السماح".

### Printing tab
- Rolls stage=printing: رقم الرول، الوزن، QR زر، تاريخ.
- Row action: "تمت الطباعة".

### Cutting tab
- Rolls stage=cutting: رقم الرول، الوزن الكلي، المقطوع، المتبقي.
- Row action "تسجيل كمية مقطوعة" { وزن (كجم), عدد القطع }.
- إذا اكتمل → شارة "اكتمل قص الرول" + عرض الهدر.

### Warehouse tab
- Table cuts غير المستلمة، Action "استلام" { الوزن المستلم (كجم), الموظف }.
- Progress cards: "المطلوب" ، "المنتج" ، "المقطوع" ، "المستلم" ، "المتبقي" ، "الهدر".

### Settings tab
- Button "إعدادات الإنتاج" opens modal:
  - نسبة السماح % (0–10)
  - السماح للرول الأخير (Checkbox)
  - بادئة أرقام الرولات (QR Prefix)
- Save → PATCH settings.

====================================================
## 4) Arabic Labels
- Film: "فيلم"، "إنشاء رول"، "الماكينة"، "وزن الرول (كجم)"، "مغلق"، "رول أخير (سماح)"، "طباعة QR"
- Printing: "طباعة"، "تمت الطباعة"
- Cutting: "تقطيع"، "تسجيل كمية مقطوعة"، "الوزن المقطوع (كجم)"، "عدد القطع"، "اكتمل قص الرول"، "الهدر"
- Warehouse: "استلام المستودع"، "استلام"، "المطلوب"، "المنتج"، "المقطوع"، "المستلم"، "المتبقي"
- Settings: "إعدادات الإنتاج"، "نسبة السماح %"، "السماح للرول الأخير"، "بادئة أرقام الرولات"

====================================================
## 5) Business rules (must enforce)
- Only sequential Film→Printing→Cutting→Warehouse.
- requires_printing=true → must go through printing; forbid skipping.
- Rolls locked when total > planned*(1+tolerance%).
- Waste auto-calculated.
- Final roll may exceed planned only if final_roll flag and within tolerance.
- Transactions + SELECT ... FOR UPDATE to avoid race conditions.
- Roles/permissions check per endpoint (Film/Printing/Cutting/Warehouse/Manager).
- Log performed_by & performed_at in each action.

====================================================
## 6) Query Keys (React Query)
- ['/api/production/settings']
- ['/api/production/film-queue']
- ['/api/production/printing-queue']
- ['/api/production/cutting-queue']
- ['/api/production/order-progress', jobOrderId]
- ['/api/rolls', rollId, 'qr']
- ['/api/warehouse/pending-receipts', jobOrderId]

====================================================
## 7) Deliverables
- Drizzle migrations with forward-only safe scripts.
- Extended schema/types.
- New Express routes with zod validation + Arabic error messages.
- React UI (tabs, tables, modals, QR, settings) fully wired.
- Ensure skeleton loaders and consistent shadcn style.
- Provide CHANGELOG of modified files and usage notes.
